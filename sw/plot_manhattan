#!/usr/bin/env python3

import sys

import numpy
import matplotlib.pyplot as plt


def main():
    region_fname, in_fname, snp_fname, plot_fname, alpha = sys.argv[1:6]
    regions = load_regions(region_fname)
    data = load_data(in_fname, regions)
    snps = plot_data(data, regions, float(alpha), plot_fname)
    write_snps(snps, snp_fname)

def load_regions(fname):
    regions = {}
    for line in open(fname):
        fields = line.rstrip().split('\t')
        if fields[0] not in regions:
            regions[fields[0]] = [[], [], []]
        regions[fields[0]][0].append(fields[3])
        regions[fields[0]][1].append(0)
        regions[fields[0]][2].append((int(fields[1]), int(fields[2])))
    for chrom in regions:
        regions[chrom][0] = numpy.array(regions[chrom][0])
        regions[chrom][1] = numpy.array(regions[chrom][1], dtype=numpy.int32)
        regions[chrom][2] = numpy.array(regions[chrom][2], dtype=numpy.int32)
        order = numpy.argsort(regions[chrom][2][:, 0])
        regions[chrom][2] = regions[chrom][2][order, :]
        regions[chrom][0] = regions[chrom][0][order]
    num = 0
    chroms = ['chr{}'.format(x) for x in numpy.r_[numpy.arange(1, 23), ['X']]]
    for chrom in chroms:
        if chrom not in regions:
            continue
        for j in range(len(regions[chrom][1])):
            regions[chrom][1][j] = num
            num += 1
    return regions

def load_data(fname, regions):
    data = []
    fs = open(fname)
    header = fs.readline().rstrip().split()
    chrom_i = header.index('CHR')
    pos_i = header.index('BP')
    snp_i = header.index('SNP')
    score_i = header.index('P')
    snp_len = 0
    for line in fs:
        if line[0] == '#':
            continue
        line = line.rstrip().split()
        try:
            chrom, pos, snp, score = line[chrom_i], line[pos_i], line[snp_i], line[score_i]
        except:
            print(line)
        if score == 'NA':
            continue
        snp_len = max(snp_len, len(snp))
        data.append((int(chrom), int(pos), snp, float(score)))
    fs.close()
    data = numpy.array(data, dtype=numpy.dtype([('chr', numpy.int32), ('pos', numpy.int32),
                                                ('snp', 'S%i' % snp_len), ('score', numpy.float64)]))
    data = data[numpy.lexsort((data['pos'], data['chr']))]
    data = data[numpy.where(numpy.logical_not(numpy.isnan(data['score'])))]
    data['score'][numpy.where(data['score'] == 0)] = numpy.amin(data['score'][numpy.where(data['score'] > 0)])
    chr_indices = numpy.r_[0, numpy.where(data['chr'][1:] != data['chr'][:-1])[0] + 1, data.shape[0]]
    for i in range(chr_indices.shape[0] - 1):
        s = chr_indices[i]
        e = chr_indices[i + 1]
        if data['chr'][s] < 23:
            key = "chr%i" % data['chr'][s]
        else:
            key = 'chrX'
        starts = numpy.searchsorted(regions[key][2][:, 1], data['pos'][s:e], side='left')
        ends = numpy.searchsorted(regions[key][2][:, 0], data['pos'][s:e], side='right') - 1
        data['chr'][numpy.where(starts != ends)[0] + s] = -1
        data['chr'][numpy.where(starts == ends)[0] + s] = regions[key][1][starts]
    data = data[numpy.where(data['chr'] >= 0)]
    data['score'] = numpy.maximum(0, -numpy.log10(data['score']))
    return data

def RGB2Hex(rgb):
    r, g, b = rgb
    hexval = "#%s%s%s" % (hex(r)[2:].upper().rjust(2, '0'),
                          hex(g)[2:].upper().rjust(2, '0'),
                          hex(b)[2:].upper().rjust(2, '0'))
    return hexval

def plot_data(data, regions, alpha, fname):
    colors = [(29,87,154), (249,92,12), (36,135,27), (193,9,27), (118,68,166),
               (107,58,50), (211,80,171), (97,97,97), (164,169,19), (33,169,187)]
    colors = [RGB2Hex(x) for x in colors]
    regints = numpy.unique(data['chr'])
    region_names = [''] * regints.shape[0]
    for chrom in regions:
        for i in range(len(regions[chrom][1])):
            region_names[regions[chrom][1][i]] = r'%s' % regions[chrom][0][i]

    widths = numpy.zeros(regints.shape[0], dtype=numpy.int32)
    reg_indices = numpy.zeros(regints.shape[0] + 1, dtype=numpy.int32)
    for i, reg in enumerate(regints):
        reg_indices[i + 1] = reg_indices[i] + numpy.sum(data['chr'] == reg)
        widths[i] = data['pos'][reg_indices[i + 1] - 1] - data['pos'][reg_indices[i]]
    padding = int(0.4 * numpy.sum(widths) / max(1, regints.shape[0] - 1)):q
    
    xspan = numpy.sum(widths) + padding * (regints.shape[0] + 3)
    X = numpy.zeros(data.shape[0], dtype=numpy.int32)
    pos = padding * 2
    for i in range(regints.shape[0]):
        s = reg_indices[i]
        e = reg_indices[i + 1]
        X[s:e] = data['pos'][s:e] - data['pos'][s] + pos
        pos += widths[i] + padding
    f = plt.figure(figsize=(6,2))
    ax = f.add_axes((0.055, 0.40, 0.94167, 0.59))
    ax.scatter(X, data['score'], s=8, c=[colors[x % len(colors)] for x in data['chr']],
               edgecolors='none')
    ax.set_ylabel(r'- Log$_{10}$(P)', size=7)
    cutoff = -numpy.log10(alpha / data.shape[0])
    print("P=%f" % cutoff)
    ax.hlines([cutoff], 0, xspan, colors='k', alpha=0.25, linewidths=0.5)
    plt.axis('tight')
    plt.xlim(0, xspan)
    yspan = numpy.amax(data['score'])
    plt.ylim(ymin=(-yspan * 0.05))
    plt.ylim(ymax=(yspan * 1.15))
    plt.xticks([(X[reg_indices[i]] + X[reg_indices[i + 1] - 1]) / 2 for i in range(len(regints))],
               region_names, rotation=40, size=6, va='top', ha='right', y=0.04, x=0.06)
    plt.yticks(size=6)
    snps = data['snp'][numpy.where(data['score'] >= cutoff)]
    snp_data = []
    for snp in snps:
        index = numpy.where(data['snp'] == snp)[0]
        if index.shape[0] > 0:
            index = index[0]
            snp_data.append(index)
            label = snp.decode('utf8')
            if not label.startswith('rs'):
                chrom, pos, a1, a2 = label.split(':')
                start = 0
                while a1[start] == a2[start]:
                    start += 1
                end1 = len(a1) - 1
                end2 = len(a2) - 1
                while end1 > start and end2 > start and a1[end1] == a2[end2]:
                    end1 -= 1
                    end2 -= 1
                label = ':'.join([chrom, pos, a1[start:(end1 + 1)], a2[start:(end2 + 1)]])
            ax.annotate(label, (X[index] - xspan * 0.008, data['score'][index] + yspan * 0.008),
                        xycoords='data', ha='right', va='bottom', size=6)
    plt.savefig(fname)
    snps = data[snp_data]
    return snps

def write_snps(snps, fname):
    output = open(fname, 'w')
    for i in range(snps.shape[0]):
        if snps['chr'][i] <= 22:
            chrom = 'chr%i' % snps['chr'][i]
        elif snps['chr'][i] == 23:
            chrom = 'chrX'
        elif snps['chr'][i] == 24:
            chrom = 'chrY'
        else:
            chrom = ''
        print("%s\t%i\t%s\t%f" % (chrom, snps['pos'][i], snps['snp'][i].decode('utf8'),
                                  snps['score'][i]), file=output)
    output.close()


if __name__ == "__main__":
    main()
